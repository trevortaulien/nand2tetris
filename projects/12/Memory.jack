// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram, heap;
    static int free;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 0;
        let free = 2048;

        let heap[2048] = 0;
        let heap[2049] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, startFree, nextAddr, segSize, postNext, prevNext, newNext;
        let startFree = free;
        while(heap[free + 1] < (size + 2)){
            if( (heap[free + 1] < (size + 2)) & (heap[free] = 0) ){
                //do Output.printString("MEMORY ERROR");
            }
            let prevNext = free;
            let free = heap[free];
        }
        let block = free + heap + 2;
        if(startFree = free){
            let nextAddr = heap[free];
            let segSize = heap[free + 1] - size - 2;
            let heap[free + 1] = size;
            let free = free + size + 2;
            let heap[free] = nextAddr;
            let heap[free + 1] = segSize;
        }
        else{
            let postNext = heap[free];
            let segSize = heap[free + 1] - size - 2;
            let heap[free + 1] = size;
            let newNext = free + size + 2;
            let heap[prevNext] = newNext;
            let heap[newNext] = postNext;
            let heap[newNext + 1] = segSize;
            let free = startFree;
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int startFree, oldPointer;

        let startFree = free;
        let oldPointer = heap[free];
        while(~(oldPointer = 0)){
            let free = oldPointer;
            let oldPointer = heap[free];
        }
        let heap[free] = o - 2;
        let heap[o - 2] = 0;
        let free = startFree;
        return;
    }    
}

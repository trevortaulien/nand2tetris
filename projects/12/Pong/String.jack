// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let str = Memory.alloc(1);
        }
        else{
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var int neg;

        let val = 0;
        let i = 0;
        let neg = 1;

        if(charAt(0) = 45){
            let neg = -1;
            do setCharAt(0,48); 
        }

        while(i < length){
            let d = str[i] - 48;
            let val = (val * 10) + d;
            let i = i + 1;
        }

        let val = val * neg;

        return val;
    }

    function int modTen(int val){
        var int result, quotient;

        let quotient = val / 10;
        let result = val - (quotient * 10);

        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var char lastDigit, c;
        var boolean neg;
        var int len;

        let neg = false;

        while(length > 0){
            do eraseLastChar();
        }

        if(val < 0){
            let neg = true;
        }

        let val = Math.abs(val);

        let lastDigit = String.modTen(val);
        let c = lastDigit + 48;
        if(val < 10){
            do appendChar(c);
            return;
        }
        else{
            do setInt(val / 10);
            do appendChar(c);
        }

        if(neg){
            let len = length;
            while((len > 0) | (len = 0)){
                do setCharAt(len + 1, str[len]);
                let len = len - 1;
            }
            do setCharAt(0, 45);
            let length = length + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

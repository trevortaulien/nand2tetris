// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~32767;
        return;
    }

    function boolean bit(int x, int i){
        if(x & (twoToThe[i])){
            return true;
        }
        return false;
    }

    function int twoToJ(int j){
        if(j = 0){ return 1; }
        if(j = 1){ return 2; }
        if(j = 2){ return 4; }
        if(j = 3){ return 8; }
        if(j = 4){ return 16; }
        if(j = 5){ return 32; }
        if(j = 6){ return 64; }
        if(j = 7){ return 128; }
        return -1;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > 0){
            return x;
        }
        else{
            return (~x) + 1;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i < 16){
            if(Math.bit(y, i) = true){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var boolean sign;   // true = negative
        var int posX, posY;
        
        let posX = x;
        let posY = y;

        let sign = false;
        if(x < 0){
            let sign = ~sign;
            let posX = Math.abs(x);
        }
        if(y < 0){
            let sign = ~sign;
            let posY = Math.abs(y);
        }

        if((posY > posX) | (posY < 0)){
            return 0;
        }
        let q = Math.divide(posX,(posY + posY));
        if((posX - (2 * q * posY)) < posY){
            if(sign){
                return 2 * q * (-1);
            }
            return 2 * q;
        }
        else{
            if(sign){
                return ((2 * q) + 1) * (-1);
            }
            return (2 * q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp0, temp1;

        let y = 0;
        let j = 7;      // n/2 - 1 where n = 16
        while(j > -1){
            let temp0 = (y + Math.twoToJ(j));
            let temp1 = temp0 * temp0;
            if(((temp1 < x) | (temp1 = x)) & (temp1 > 0)){
                let y = y + Math.twoToJ(j);
            }
            let j = (j - 1);
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }
}

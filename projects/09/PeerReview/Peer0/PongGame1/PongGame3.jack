// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/PongGame.jack

/**
 * Represents a Pong game.
 */

class PongGame3 {

    static PongGame3 instance; // the singelton, a Pong game instance     
    field Bat bat0, bat;            // the bat
    field Ball ball;          // the ball
    field int wall;           // the current wall that the ball is bouncing off of.
    field boolean exit;       // true when the game is over
    field int score0, score;          // the current score.
    field int lastWall;       // the last wall that the ball bounced off of.

    // The current width of the bat
    field int batWidth;

    /** Constructs a new Pong game (level 1). */
    constructor PongGame3 new() {
	    do Screen.clearScreen();
        let batWidth = 60;  // initial bat size
        let bat0 = Bat.new(3, 100, batWidth, 7);
		let bat = Bat.new(502, 100, batWidth, 7);
        let ball = Ball.new(253, 222, 10, 502, 0, 255, 20);
        do ball.setDestination(400,0);
        do Screen.drawRectangle(0, 0, 2, 255);
		do Screen.drawRectangle(509, 0, 511, 255);
		do Screen.drawLine(256, 0, 256, 255);
	    do Output.moveCursor(12,30);
		do Output.printString("0");
		do Output.moveCursor(12,34);
	    do Output.printString("0");
		do Output.moveCursor(0,28);
		do Output.printString("Level 3");
	
	    let exit = false;
		let score0 = 0;
	    let score = 0;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }	

    /** Deallocates the object's memory. */
    method void dispose() {
	    do bat0.dispose();
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = PongGame3.new();
        return;
    }
	
	
    /** Returns the single instance of this Pong game. */
    function PongGame3 getInstance() {
        return instance;
    }

    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;		
		
        while (~exit) {		    
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();                               
				do bat.move();
                do moveBall();
				if ( ball.getLeft() < 256) {
					if (ball.getDown() < (bat0.getUp() + (batWidth/2))){do bat0.setDirection(1);}
					else { do bat0.setDirection(2);}
					}				
				do bat0.move1();
                do Sys.wait(50);
                }

            if (key = 131) { do bat.setDirection(1); }
	        else {
	            if (key = 133) { do bat.setDirection(2); }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();				
                do bat.move();
                do moveBall();
				if ( ball.getLeft() < 256) {
					if (ball.getDown() < (bat0.getUp() + (batWidth/2))){do bat0.setDirection(1);}
					else { do bat0.setDirection(2);}
					}
				do bat0.move1();					
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(8,29);			
	        do Output.printString("Game Over");
			if (score0 = 4) { do Output.moveCursor(10,27);
    		do Output.printString("Win");}
			else {do Output.moveCursor(10,37);
    		do Output.printString("Win");}
	    }
        do Sys.wait(3000);   
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    method void moveBall() {
        var int bouncingDirection, batUp0, batDown0, batUp, batDown, ballUp, ballDown;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let batUp = bat.getUp();
            let batDown = bat.getDown();
            let batUp0 = bat0.getUp();
            let batDown0 = bat0.getDown();			
            let ballUp = ball.getUp();
            let ballDown = ball.getDown();
            if (wall = 1) {
                if (~exit) {
                    if (ballDown < (batUp0 + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballUp > (batDown0 - 10)) { let bouncingDirection = 1; }
                    }
                    if ((batUp0 < ballUp) & (batDown0 > ballDown)) {					
                    let score0 = score0 + 1;}
					if (score0 = 4){let exit = true;}
                    do Output.moveCursor(12,30);
                    do Output.printInt(score0);
                }
            }				
			else{
				if (wall = 2) {
					if (~exit) {
						if (ballDown < (batUp + 10)) { let bouncingDirection = -1; }
						else {
							if (ballUp > (batDown - 10)) { let bouncingDirection = 1; }
						}
		                if ((batUp < ballUp) & (batDown > ballDown)) {					
                        let score = score + 1;}						
						if (score = 4){let exit = true;}
						do Output.moveCursor(12,34);
						do Output.printInt(score);
					}
				}
			}
            do ball.bounce(bouncingDirection);
        }
        return;
        }
	}
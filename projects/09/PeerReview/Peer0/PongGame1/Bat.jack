// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/Bat.jack

/**
 * A graphical Pong bat. 
 * Displayed as a filled horizontal rectangle that has 
 * a screen location, a width and a height.
 * Has methods for drawing, erasing, moving up and down, 
 * (and changing its width (to make the hitting action more challenging).)
 * This class should have been called "paddle", following the 
 * standard Pong terminology. But, unaware of this terminology,
 * we called it "bat", and then decided to stick to it. 
 */
class Bat {

    field int x, y;           // the bat's screen location
    field int width, height;  // the bat's width and height
    field int direction;      // direction of the bat's movement (1 = up, 2 = down)

    /** Constructs a new bat with the given location and width. */
    constructor Bat new(int Ax, int Ay, int Awidth, int Aheight) {
        let x = Ax;
        let y = Ay;
        let width = Awidth;
        let height = Aheight;
        let direction = 2;
        do show();
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Shows the bat. */
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    /** Hides the bat. */
    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }

    /** Draws the bat. */
    method void draw() {
        do Screen.drawRectangle(x, y, x + height, y + width);
        return;
    }

    /** Sets the bat's direction (0=stop, 1=up, 2=down). */
    method void setDirection(int Adirection) {
        let direction = Adirection;
        return;
    }

    /** Returns the bat's up edge. */
    method int getUp() {
        return y;
    }

    /** Returns the bat's down edge. */
    method int getDown() {
        return y + width;
    }

    /** Sets the bat's width. */
    method void setWidth(int Awidth) {
        do hide();
        let width = Awidth;
        do show();
        return;
    }

    /** Moves the bat one step in the bat's direction. */
    method void move() {
	    if (direction = 1) {
            let y = y - 4;
            if (y < 0) { let y = 0; }
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + width) + 1, x + height, (y + width) + 4);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + height, y + 3);
        }
        else {
            let y = y + 4;
            if ((y + width) > 255) { let y = 255 - width; }
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y - 4, x + height, y - 1);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, (y + width) - 3, x + height, y + width);
        }
        return;
    }

    /** Moves the bat0 continuously. */
    method void move0() {
	    if (direction = 1) {
            let y = y - 4;
            if (y < 0) { let y = 0; 
			do setDirection(2);}
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + width) + 1, x + height, (y + width) + 4);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + height, y + 3);
			
        }
        else {
            let y = y + 4;
            if ((y + width) > 255) { let y = 255 - width;
			do setDirection(1);}
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y - 4, x + height, y - 1);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, (y + width) - 3, x + height, y + width);
			
		}
		return;
    }	
	
    /** Moves the bat0 continuously. */
    method void move1() {
	    if (direction = 1) {
            let y = y - 20;
            if (y < 0) { let y = 0; 
			do setDirection(2);}
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + width) + 1, x + height, (y + width) + 20);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + height, y + 19);
			
        }
        else {
            let y = y + 20;
            if ((y + width) > 255) { let y = 255 - width;
			do setDirection(1);}
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y - 20, x + height, y - 1);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, (y + width) - 19, x + height, y + width);
			
		}
		return;
    }	
}
